# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DULwzt0ikzHJnyJ0LD68E_2FwbkCNLGr

Enhanced Mini Expert System: University Logic Rules
With CSV Logging for Record-Keeping
"""

# Import needed libraries

import csv
from datetime import datetime

"""LOGIC FUNCTIONS"""

def impl(p, q):
    return (not p) or q  # Implication (P -> Q)

def tf(b: bool) -> str:
    return "T" if b else "F"

"""LOGGER"""

def log_result(student_name, rule_name, result):
    with open("logic_results.csv", "a", newline="") as file:
        writer = csv.writer(file)
        writer.writerow([datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                         student_name, rule_name, result])

"""Rule 1: Attendance"""

def attendance_rule(student_name):
    print("\n--- Attendance Rule Checker ---")
    late = input("Is the student late? (T/F): ").strip().upper() == "T"
    excuse = input("Did the student bring an excuse letter? (T/F): ").strip().upper() == "T"

    result = impl(late, excuse)
    outcome = "Satisfied ✅" if result else "Violated ❌"

    print(f"P = ({tf(late)}) (Late), Q = ({tf(excuse)}) (Excuse Letter)")
    print("Result:", outcome)

    log_result(student_name, "Attendance Rule", outcome)

"""Rule 2: Grading"""

def grading_rule(student_name):
    print("\n--- Grading Rule Checker ---")
    try:
        grade = float(input("Enter student grade: "))
    except ValueError:
        print("Invalid grade input.")
        return

    P = True
    Q = grade >= 75
    result = impl(P, Q)
    outcome = "Satisfied ✅" if result else "Violated ❌"

    print(f"P = ({tf(P)}) (grade ≥ 75), Q = ({tf(Q)}) (student passes)")
    print("Result:", outcome)

    log_result(student_name, "Grading Rule", outcome)

"""Rule 3: Login System"""

# ---------- Rule 3: Login System ----------
def login_rule(student_name):
    print("\n--- Login Rule Checker ---")
    correct_password = "admin123"
    attempt = input("Enter password: ")

    P = True
    Q = (attempt == correct_password)
    result = impl(P, Q)
    outcome = "Access granted ✅" if result else "Access denied ❌"

    print(f"P = ({tf(P)}) (Password Correct), Q = ({tf(Q)}) (Access Granted)")
    print("Result:", outcome)

    log_result(student_name, "Login Rule", outcome)

"""Rule 4: Bonus Points"""

def bonus_rule(student_name):
    print("\n--- Bonus Points Eligibility Checker ---")
    regular = input("Does the student have regular attendance? (T/F): ").strip().upper() == "T"
    bonus = input("Is the student eligible for bonus points? (T/F): ").strip().upper() == "T"

    result = impl(regular, bonus)
    outcome = "Satisfied ✅" if result else "Violated ❌"

    print(f"P = ({tf(regular)}) (Regular Attendance), Q = ({tf(bonus)}) (Bonus Eligible)")
    print("Result:", outcome)

    log_result(student_name, "Bonus Rule", outcome)

"""Rule 5: Library Borrowing"""

def library_rule(student_name):
    print("\n--- Library Borrowing Rule Checker ---")
    valid_id = input("Does the student have a valid ID? (T/F): ").strip().upper() == "T"
    borrow = input("Is the student allowed to borrow books? (T/F): ").strip().upper() == "T"

    result = impl(valid_id, borrow)
    outcome = "Allowed ✅" if result else "Denied ❌"

    print(f"P = ({tf(valid_id)}) (Valid ID), Q = ({tf(borrow)}) (Borrow Allowed)")
    print("Result:", outcome)

    log_result(student_name, "Library Rule", outcome)

"""Main Menu"""

def main():
    print("=== University Logic Rules System ===")
    student_name = input("Enter student name: ").strip()

    while True:
        print("\n================================")
        print(" Main Menu")
        print("================================")
        print("1) Attendance Rule Checker")
        print("2) Grading Rule Checker")
        print("3) Login Rule Checker")
        print("4) Bonus Points Checker")
        print("5) Library Borrowing Checker")
        print("6) Exit")

        choice = input("\nChoose an option (1-6): ").strip()

        if choice == "1":
            attendance_rule(student_name)
        elif choice == "2":
            grading_rule(student_name)
        elif choice == "3":
            login_rule(student_name)
        elif choice == "4":
            bonus_rule(student_name)
        elif choice == "5":
            library_rule(student_name)
        elif choice == "6":
            print("Exiting... Results saved to logic_results.csv")
            break
        else:
            print("Invalid choice. Try again. Please select 1-6.")

"""CSV Initialization"""

if __name__ == "__main__":
    # Create CSV with headers if not exists
    with open("logic_results.csv", "a", newline="") as file:
        writer = csv.writer(file)
        if file.tell() == 0:  # only write header if file is empty
            writer.writerow(["Timestamp", "Student Name", "Rule", "Result"])

    # Run the program
    main()